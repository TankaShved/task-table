{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["noga","title","field","type","lookup","App","props","state","lico","this","nash_usersGet","a","fetch","responce","json","data","setState","gopa","id","method","response","ok","alert","status","lopsf","user","headers","body","JSON","stringify","tapok","lol","style","maxWidth","options","sorting","columns","editable","onRowAdd","newData","Promise","resolve","reject","setTimeout","user_age","age","name","user_name","sex","user_sex","nash_userAdd","onRowUpdate","nash_userUpdate","onRowDelete","oldData","nash_usersDel","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0TAIMA,EAAO,CACX,CAAEC,MAAO,MAAOC,MAAO,WAAYC,KAAM,WACzC,CAAEF,MAAO,OAAQC,MAAO,aACxB,CAAED,MAAO,MAAOC,MAAO,WAAYE,OAAQ,CAAE,EAAK,MAAO,EAAK,WAuHjDC,E,kDAnHb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CAAEC,KAAM,IAFJ,E,iEAKjBC,KAAKC,kB,sCAEU,IAAD,QACJ,uCAAG,8BAAAC,EAAA,4DACC,mEADD,SAEYC,MADX,oEADD,cAELC,EAFK,gBAGQA,EAASC,OAHjB,OAGLC,EAHK,OAIX,EAAKC,SAAS,CACZR,KAAMO,IALG,2CAAH,qDAQVE,K,oCAEYC,GAAK,IAAD,QACL,uCAAG,4BAAAP,EAAA,sEACSC,MAAM,oEAAsEM,EAC/F,CAAEC,OAAQ,WAFA,QACRC,EADQ,QAGCC,IAGXC,MAAM,8CAAkBF,EAASG,QAEnC,EAAKb,gBARO,2CAAH,qDAUXc,K,sCAEcN,EAAIO,GAAO,IAAD,QACb,uCAAG,sBAAAd,EAAA,sEACNC,MAAM,oEAAsEM,EAChF,CACEC,OAAQ,QACRO,QAAS,CAAE,eAAgB,oBAC3BC,KAAMC,KAAKC,UAAUJ,KALb,OAOZ,EAAKf,gBAPO,2CAAH,qDASXoB,K,mCAEWL,GAAO,IAAD,QACR,uCAAG,sBAAAd,EAAA,sEACJC,MAAM,oEAAqE,CAC/EO,OAAQ,OACRO,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAUJ,KANb,OAQV,EAAKf,gBARK,2CAAH,qDAUTqB,K,+BAGQ,IAAD,OACP,OAAQ,yBAAKC,MAAO,CAAEC,SAAU,SAC9B,kBAAC,IAAD,CACEC,QAAS,CACPC,SAAS,GAEXC,QAASpC,EACTe,KAAMN,KAAKF,MAAMC,KACjB6B,SACE,CACEC,SAAU,SAAAC,GAAO,OAAI,IAAIC,SAAQ,SAACC,EAASC,GACzCC,YAAW,WACT,GAAIJ,EAAQK,UAAY,EACtBtB,MAAM,4JACNoB,QAEG,CACH,IAAIjB,EAAO,CACToB,IAAKN,EAAQK,SACbE,KAAMP,EAAQQ,UACdC,IAAKT,EAAQU,UAEf,EAAKC,aAAazB,GAClBgB,OAED,QAELU,YAAa,SAAAZ,GAAO,OAAI,IAAIC,SAAQ,SAACC,EAASC,GAC5CC,YAAW,WACT,GAAIJ,EAAQK,UAAY,EACtBtB,MAAM,4JACNoB,QAEG,CACH,IAAIjB,EAAO,CACToB,IAAKN,EAAQK,SACbE,KAAMP,EAAQQ,UACdC,IAAKT,EAAQU,UAEf,EAAKG,gBAAgBb,EAAQrB,GAAIO,GACjCgB,OAED,QAELY,YAAa,SAAAC,GAAO,OAAI,IAAId,SAAQ,SAACC,GACnCE,YAAW,WACT,EAAKY,cAAcD,EAAQpC,IAC3BuB,MACC,SAITxC,MAAM,e,GA9GIuD,IAAMC,WCEJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.0bd2c1ac.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport MaterialTable from \"material-table\";\n\nconst noga = [\n  { title: \"Age\", field: \"user_age\", type: \"numeric\" },\n  { title: \"Name\", field: \"user_name\" },\n  { title: \"Sex\", field: \"user_sex\", lookup: { 'M': \"Man\", 'F': \"Woman\" } }\n]\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = { lico: [] }\n  }\n  componentWillMount() {\n    this.nash_usersGet()\n  }\n  nash_usersGet() {\n    const gopa = async () => {\n      const url = 'https://7r2d5vhfu8.execute-api.eu-west-2.amazonaws.com/dev/users'\n      const responce = await fetch(url)\n      const data = await responce.json()\n      this.setState({\n        lico: data\n      })\n    }\n    gopa()\n  }\n  nash_usersDel(id) {\n    const lopsf = async () => {\n      let response = await fetch('https://7r2d5vhfu8.execute-api.eu-west-2.amazonaws.com/dev/users/' + id,\n        { method: 'DELETE' })\n      if (response.ok) {\n        //alert(await response.text())\n      } else {\n        alert(\"Ошибка HTTP: \" + response.status);\n      }\n      this.nash_usersGet()\n    }\n    lopsf()\n  }\n  nash_userUpdate(id, user) {\n    const tapok = async () => {\n      await fetch('https://7r2d5vhfu8.execute-api.eu-west-2.amazonaws.com/dev/users/' + id,\n        {\n          method: 'PATCH',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify(user)\n        })\n      this.nash_usersGet()\n    }\n    tapok()\n  }\n  nash_userAdd(user) {\n    const lol = async () => {\n      await fetch('https://7r2d5vhfu8.execute-api.eu-west-2.amazonaws.com/dev/users/', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(user)\n      })\n      this.nash_usersGet()\n    }\n    lol()\n  }\n\n  render() {\n    return (<div style={{ maxWidth: \"100%\" }}>\n      <MaterialTable\n        options={{\n          sorting: true\n        }}\n        columns={noga}\n        data={this.state.lico}\n        editable={\n          {\n            onRowAdd: newData => new Promise((resolve, reject) => {\n              setTimeout(() => {\n                if (newData.user_age <= 0) {\n                  alert(\"Введите положительное число\")\n                  reject()\n                }\n                else {\n                  let user = {\n                    age: newData.user_age,\n                    name: newData.user_name,\n                    sex: newData.user_sex\n                  }\n                  this.nash_userAdd(user)\n                  resolve()\n                }\n              }, 10);\n            }),\n            onRowUpdate: newData => new Promise((resolve, reject) => {\n              setTimeout(() => {\n                if (newData.user_age <= 0) {\n                  alert(\"Введите положительное число\")\n                  reject()\n                }\n                else {\n                  let user = {\n                    age: newData.user_age,\n                    name: newData.user_name,\n                    sex: newData.user_sex\n                  }\n                  this.nash_userUpdate(newData.id, user)\n                  resolve();\n                }\n              }, 10);\n            }),\n            onRowDelete: oldData => new Promise((resolve) => {\n              setTimeout(() => {\n                this.nash_usersDel(oldData.id)\n                resolve();\n              }, 10);\n            })\n          }\n        }\n        title=\"Users\"\n      />\n    </div>)\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}